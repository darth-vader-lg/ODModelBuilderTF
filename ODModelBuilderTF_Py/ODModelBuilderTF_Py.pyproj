<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>bf17799b-e8e4-4441-9f34-25b050033535</ProjectGuid>
    <ProjectHome>
    </ProjectHome>
    <StartupFile>main.py</StartupFile>
    <SearchPath>env\Scripts</SearchPath>
    <WorkingDirectory>.</WorkingDirectory>
    <OutputPath>.</OutputPath>
    <Name>ODModelBuilderTF_Py</Name>
    <RootNamespace>ODModelBuilderTF</RootNamespace>
    <InterpreterId>MSBuild|env|$(MSBuildProjectFullPath)</InterpreterId>
    <LaunchProvider>Standard Python launcher</LaunchProvider>
    <InterpreterPath>
    </InterpreterPath>
    <EnableNativeCodeDebugging>False</EnableNativeCodeDebugging>
    <InterpreterArguments>
    </InterpreterArguments>
    <CommandLineArguments>
    </CommandLineArguments>
    <Environment>_CUDA_VISIBLE_DEVICES=-1</Environment>
    <IsWindowsApplication>False</IsWindowsApplication>
    <SuppressPackageInstallationPrompt>True</SuppressPackageInstallationPrompt>
    <SuppressConfigureTestFrameworkPrompt>true</SuppressConfigureTestFrameworkPrompt>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>true</DebugSymbols>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="base_parameters.py">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="default_cfg.py">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="eval_main.py">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="export_frozen_graph.py">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="export_model_config.py">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="export_onnx.py">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="install_virtual_environment.py">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="main.py">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="mount_google_drive.py">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="export_main.py">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="export_parameters.py">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="export_environment.py">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="eval_environment.py">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="eval_parameters.py">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="train_pipeline.py">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="pretrained_model.py">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="train_environment.py">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="od_install.py">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="model_types.py">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="train_tensorboard.py" />
    <Compile Include="utilities.py">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="train_main.py" />
    <Compile Include="tf_records.py">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="train_parameters.py">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <Content Include="Activate.cmd.txt" />
    <Content Include="Activate.ps1.txt" />
    <Content Include="env_shell.ps1" />
    <Content Include="install_virtual_environment.cmd" />
    <Content Include="install_virtual_environment.ps1" />
    <Content Include="env_shell.cmd" />
    <Content Include="Packages\pycocotools-2.0.2-cp37-cp37m-win_amd64.whl" />
    <Content Include="py_to_ODModelBuilderTF_ipynb.bat" />
    <Content Include="requirements-colab.txt" />
    <Content Include="requirements.txt" />
    <Content Include="set_sync_jupyter_notebook_env.bat" />
    <Content Include="ODModelBuilderTF.ipynb" />
    <Content Include="ODModelBuilderTF_ipynb_to_py.bat" />
  </ItemGroup>
  <ItemGroup>
    <Folder Include="Packages\" />
  </ItemGroup>
  <ItemGroup>
    <Interpreter Include="env\">
      <Id>env</Id>
      <Version>3.7</Version>
      <Description>env</Description>
      <InterpreterPath>python.exe</InterpreterPath>
      <WindowsInterpreterPath>pythonw.exe</WindowsInterpreterPath>
      <PathEnvironmentVariable>PYTHONPATH</PathEnvironmentVariable>
      <Architecture>X64</Architecture>
    </Interpreter>
  </ItemGroup>
  <ItemGroup>
    <OutputFiles Include="$(OutputPath)env\env.info">
      <Visible>false</Visible>
    </OutputFiles>
  </ItemGroup>
  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)\Python Tools\Microsoft.PythonTools.targets" />
  <PropertyGroup>
    <BuildDependsOn>
      CoreCompile
    </BuildDependsOn>
  </PropertyGroup>
  <UsingTask TaskName="UpdateRequirements" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup />
    <Task>
      <Code Type="Fragment" Language="cs">
        var UpdateRequirementsFile = new Action&lt;string&gt;(path =&gt;
        {
          if (File.Exists(@"$(ProjectDir)requirements.txt")) {
            var reqs = File.ReadAllLines(@"$(ProjectDir)requirements.txt").ToList();
            var GetSpecialRequirement = new Func&lt;string, string, Tuple&lt;string, string, int&gt;&gt;((req, prefix) =&gt;
            {
              for (var i = 0; i &lt; reqs.Count; i++) {
                var rTrim = reqs[i].Trim();
                if (!string.IsNullOrEmpty(prefix)) {
                  if (!rTrim.StartsWith(prefix))
                    continue;
                  rTrim = rTrim.Substring(prefix.Length).TrimStart();
                }
                if (!rTrim.StartsWith(req))
                  continue;
                rTrim = rTrim.Substring(req.Length).TrimStart();
                var opList = new[] { '&lt;', '&gt;', '=', '!', '~' };
                var op = "";
                if (rTrim.Length &gt; 0 &amp;&amp; !opList.Any(c =&gt; c == rTrim[0]))
                  continue;
                while (rTrim.Length &gt; 0 &amp;&amp; opList.Any(c =&gt; c == rTrim[0])) {
                  op = op + new string(rTrim[0], 1);
                  rTrim = rTrim.Substring(1).TrimStart();
                }
                return new Tuple&lt;string, string, int&gt;(rTrim, op, i);
              }
              return new Tuple&lt;string, string, int&gt;(null, null, -1);
            });
            var writeReqs = false;
            var UpdateSpecialRequirement = new Action&lt;string, string, string&gt;((req, prefix, ver) =&gt;
            {
              var sr = GetSpecialRequirement(req, prefix);
              if (!string.IsNullOrEmpty(sr.Item1)) {
                if (sr.Item1 != ver) {
                  if (!string.IsNullOrEmpty(ver))
                    reqs[sr.Item3] = (prefix ?? "") + req + sr.Item2 + ver;
                  else
                    reqs[sr.Item3] = "";
                  writeReqs = true;
                }
              }
              else if (!string.IsNullOrEmpty(ver)) {
                  reqs.Append((prefix ?? "") + req + "==" + ver);
                  writeReqs = true;
              }
            });
            UpdateSpecialRequirement("object-detection", null, @"$(ObjectDetectionVersion)");
            UpdateSpecialRequirement("object-detection-repo", "#@", @"$(ObjectDetectionRepository)");
            UpdateSpecialRequirement("object-detection-ref", "#@", @"$(ObjectDetectionRepositoryRef)");
            UpdateSpecialRequirement("tensorflow", null, @"$(TensorFlowVersion)");
            UpdateSpecialRequirement("tensorflow-cuda10", "#@", @"$(TensorCuda10Url)");
            UpdateSpecialRequirement("tf2onnx", null, @"$(TF2OnnxVersion)");
            UpdateSpecialRequirement("tf2onnx-repo", "#@", @"$(TF2OnnxRepository)");
            UpdateSpecialRequirement("tf2onnx-ref", "#@", @"$(TF2OnnxRepositoryRef)");
            if (writeReqs) {
              Log.LogMessage(MessageImportance.High, "Updating " + Path.GetFileName(path));
              File.WriteAllLines(@"$(ProjectDir)requirements.txt", reqs.Where(r =&gt; !string.IsNullOrEmpty(r)));
            }
          }
        });
        UpdateRequirementsFile(@"$(ProjectDir)requirements.txt");
        UpdateRequirementsFile(@"$(ProjectDir)requirements-colab.txt");
        var writeIpynb = false;
        if (File.Exists(@"$(ProjectDir)ODModelBuilderTF.ipynb")) {
          var ipynb = File.ReadAllLines(@"$(ProjectDir)ODModelBuilderTF.ipynb");
          var UpdateIpynb = new Action&lt;string, string&gt;((id, value) =&gt;
          {
            id = id + "=";
            for (var i = 0; i &lt; ipynb.Length; i++) {
              var l = ipynb[i].Replace(" ", "").Replace("\t", "");
              if (l.Contains(id)) {
                l = ipynb[i];
                var ixStart = l.IndexOf('\'');
                if (ixStart &gt; -1) {
                  var ixEnd = l.IndexOf('\'', ixStart + 1);
                  if (ixEnd &gt; -1) {
                    var currentValue = l.Substring(ixStart + 1, ixEnd - ixStart - 1).Trim();
                    if (currentValue != value) {
                      ipynb[i] = l.Replace(currentValue, value);
                      writeIpynb = true;
                    }
                  }
                }
              }
            }
          });
          UpdateIpynb("repo_url", "$(RepositoryUrl)");
          UpdateIpynb("repo_ref", "$(RepositoryRef)");
          for (var i = 0; i &lt; ipynb.Length; i++) {
            var l = ipynb[i].Replace(" ", "").Replace("\t", "").ToLower();
            if (l.Contains("objectdetectiontrain") &amp;&amp; l.Contains("withtensorflow") ) {
              l = ipynb[i];
              var ixStart = l.ToLower().IndexOf("train");
              if (ixStart &gt; -1) {
                var release = new string(l.ToCharArray().Skip(ixStart + "train".Length).SkipWhile(c =&gt; c == ' ' || c == '\t').TakeWhile(c =&gt; c != ' ' &amp;&amp; c != '\t').ToArray());
                if (release != "$(ObjectDetectionVersion)") {
                  ipynb[i] = ipynb[i].Replace(release, "$(ObjectDetectionVersion)");
                  writeIpynb = true;
                }
              }
              ixStart = l.ToLower().IndexOf("tensorflow");
              if (ixStart &gt; -1) {
                var release = new string(l.ToCharArray().Skip(ixStart + "tensorflow".Length).SkipWhile(c =&gt; new[] { ' ',  '\t', '&gt;', '=' }.Any(cs =&gt; cs == c)).TakeWhile(c =&gt; c != ' ' &amp;&amp; c != '\t' &amp;&amp; c != '\\').ToArray());
                if (release != "$(TensorFlowVersion)") {
                  ipynb[i] = ipynb[i].Replace(release, "$(TensorFlowVersion)");
                  writeIpynb = true;
                }
              }
            }
          }
          if (writeIpynb) {
            Log.LogMessage(MessageImportance.High, "Updating Colab notebook");
            File.WriteAllLines(@"$(ProjectDir)ODModelBuilderTF.ipynb", ipynb);
          }
        }
      </Code>
    </Task>
  </UsingTask>
  <Target Name="Clean">
    <Exec Condition="Exists('$(ProjectDir)env')" Command="PowerShell -NoProfile -ExecutionPolicy Bypass -Command &quot;rd -Recurse -Force '$(ProjectDir)env'&quot;" />
    <Delete Condition="Exists('$(OutputPath)env\env.info')" Files="$(OutputPath)env\env.info" />
  </Target>
  <Target Name="CoreCompile">
    <Message Importance="High" Text="Checking the virtual environment" />
    <UpdateRequirements />
    <Exec Command="$(ProjectDir)install_virtual_environment.cmd" />
  </Target>
</Project>